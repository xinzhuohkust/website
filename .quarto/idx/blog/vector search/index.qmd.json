{"title":"Vecotr Search Engine","markdown":{"yaml":{"title":"Vecotr Search Engine","date":"Nov 5, 2023","categories":["R","Python","Embedding","BERT"],"description":"based on pretrained sentence embeddings","code-fold":"show","feed":true,"cap-location":"bottom","citation":{"author":"Huang Xinzhuo"}},"containsRefs":false,"markdown":"\n\n```{=html}\n<style>\nbody {text-align: justify}\n</style>\n```\n![](embedding.png){fig-align=\"center\" width=\"300\"}\n\nLet's utilize a pre-trained sentence model to convert text into sentence vectors, then perfrom vector search. We will use CUDA to accerate the process. I wil call Python in R through `reticulate`.\n```{r}\n#| code-summary: Package Mangement\n#| code-fold: true\nrequire(pacman)\np_load(reticulate, tidyverse, tictoc)\n```\n\nCall Python in R and check if CUDA is available.\n```{r}\nreticulate::use_python(\"C:\\\\Users\\\\xhuangcb\\\\anaconda3\\\\envs\\\\pytorch_gpu\\\\python.exe\") \n\ntorch <- reticulate::import(\"torch\")\n\ntorch$cuda$is_available()\n```\n\nUtilize pretrained model [GanymedeNil/text2vec-large-chinese](https://huggingface.co/GanymedeNil/text2vec-large-chinese).\n```{r}\ntext2vec <- reticulate::import(\"text2vec\")\n\nmodel <- text2vec$SentenceModel(\"GanymedeNil/text2vec-large-chinese\")\n```\n\nSample data is from Chinese court document. Let's vonvert the text into a 1024-dimensional vector. It takes 24 seconds to process 2000 court  documents, using a RTX 3080.\n\n```{r}\n#| eval: false\njudgements <- rio::import(\"D:/OneDrive - HKUST Connect/search_engine/legal.csv\", setclass = \"tibble\")\n\ntic()\nvec <- judgements %>% \n    mutate(vecotr = model$encode(content))\ntoc()\n```\n\n```{r}\n#| echo: false\nprint(\"24.27 sec elapsed\")\n```\n\n```{r}\n#| eval: false\nvec$vector <- vec$vector %>% \n    as_tibble()\n\nvec <- vec %>%  \n    nest(data = vector) %>% \n    mutate(data = map(data, ~ unlist(.) |> unname()))\n```\n\n```{r}\n#| echo: false\nvec <- read_rds(\"E:/OneDrive - HKUST Connect/search_engine/sentence_vector.Rds\")\n\nvec$vector %>% \n    as_tibble() %>% \n    head(10)\n```\n<br>\nBuild a vector search engine.\n\n```{r}\n#| eval: false\nannoy <- reticulate::import(\"annoy\")\n\nindex <- annoy$AnnoyIndex(1024L, \"angular\")\n\nadd_item <- \\(x, y) {\n    index$add_item(x, y)\n}\n\nwalk2(\n    .x = 1L:1895L,\n    .y = vec$data,\n    possibly(add_item)\n)\n\nindex$build(10L)\n\nindex$save(\"E:/OneDrive - HKUST Connect/search_engine/search_index.ann\")\n```\n\n```{r}\n#| eval: false\nsearch_engine <- \\(df, keyword, top = 10L, ann = \"E:/OneDrive - HKUST Connect/search_engine/search_index.ann\") {\n    search$load(ann) \n\n    indexing <- search$get_nns_by_vector(model$encode(keyword), 10L)\n\n    df %>% \n        slice(indexing)\n\n}\n\nsearch_engine(df = vec, keyword = \"土地所有权纠纷\")\n```\n```{r}\n#| echo: false\nread_rds(\"E:/OneDrive - HKUST Connect/search_engine/sentence_vector_result.Rds\") %>% \n    select(title)\n```","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\nbody {text-align: justify}\n</style>\n```\n![](embedding.png){fig-align=\"center\" width=\"300\"}\n\nLet's utilize a pre-trained sentence model to convert text into sentence vectors, then perfrom vector search. We will use CUDA to accerate the process. I wil call Python in R through `reticulate`.\n```{r}\n#| code-summary: Package Mangement\n#| code-fold: true\nrequire(pacman)\np_load(reticulate, tidyverse, tictoc)\n```\n\nCall Python in R and check if CUDA is available.\n```{r}\nreticulate::use_python(\"C:\\\\Users\\\\xhuangcb\\\\anaconda3\\\\envs\\\\pytorch_gpu\\\\python.exe\") \n\ntorch <- reticulate::import(\"torch\")\n\ntorch$cuda$is_available()\n```\n\nUtilize pretrained model [GanymedeNil/text2vec-large-chinese](https://huggingface.co/GanymedeNil/text2vec-large-chinese).\n```{r}\ntext2vec <- reticulate::import(\"text2vec\")\n\nmodel <- text2vec$SentenceModel(\"GanymedeNil/text2vec-large-chinese\")\n```\n\nSample data is from Chinese court document. Let's vonvert the text into a 1024-dimensional vector. It takes 24 seconds to process 2000 court  documents, using a RTX 3080.\n\n```{r}\n#| eval: false\njudgements <- rio::import(\"D:/OneDrive - HKUST Connect/search_engine/legal.csv\", setclass = \"tibble\")\n\ntic()\nvec <- judgements %>% \n    mutate(vecotr = model$encode(content))\ntoc()\n```\n\n```{r}\n#| echo: false\nprint(\"24.27 sec elapsed\")\n```\n\n```{r}\n#| eval: false\nvec$vector <- vec$vector %>% \n    as_tibble()\n\nvec <- vec %>%  \n    nest(data = vector) %>% \n    mutate(data = map(data, ~ unlist(.) |> unname()))\n```\n\n```{r}\n#| echo: false\nvec <- read_rds(\"E:/OneDrive - HKUST Connect/search_engine/sentence_vector.Rds\")\n\nvec$vector %>% \n    as_tibble() %>% \n    head(10)\n```\n<br>\nBuild a vector search engine.\n\n```{r}\n#| eval: false\nannoy <- reticulate::import(\"annoy\")\n\nindex <- annoy$AnnoyIndex(1024L, \"angular\")\n\nadd_item <- \\(x, y) {\n    index$add_item(x, y)\n}\n\nwalk2(\n    .x = 1L:1895L,\n    .y = vec$data,\n    possibly(add_item)\n)\n\nindex$build(10L)\n\nindex$save(\"E:/OneDrive - HKUST Connect/search_engine/search_index.ann\")\n```\n\n```{r}\n#| eval: false\nsearch_engine <- \\(df, keyword, top = 10L, ann = \"E:/OneDrive - HKUST Connect/search_engine/search_index.ann\") {\n    search$load(ann) \n\n    indexing <- search$get_nns_by_vector(model$encode(keyword), 10L)\n\n    df %>% \n        slice(indexing)\n\n}\n\nsearch_engine(df = vec, keyword = \"土地所有权纠纷\")\n```\n```{r}\n#| echo: false\nread_rds(\"E:/OneDrive - HKUST Connect/search_engine/sentence_vector_result.Rds\") %>% \n    select(title)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../scss/styles.css"],"highlight-style":"gruvbox","toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","preview":{"port":5555,"browser":true,"watch-inputs":true,"navigate":true},"bibliography":["../../bib/references.bib"],"csl":"../../bib/chicago-author-date.csl","knitr":{"opts_chunk":{"warning":false,"message":false,"error":false}},"code-annotations":"hover","editor":"visual","theme":{"light":["flatly","../../scss/light.scss"],"dark":["darkly","../../scss/dark.scss"]},"author":[{"name":"Xinzhuo Huang","orcid":"0009-0007-6448-5114","email":"xhuangcb@connect.ust.hk","affiliations":[{"name":"HKUST SOSC"}]}],"smooth-scroll":true,"code-block-bg":"#f5f5f5","code-block-border-left":"#E0E0E0","date-modified":"last-modified","toc-location":"right","link-citations":"yes","comments":{"giscus":{"repo":"xinzhuohkust/comments","theme":"light"},"hypothesis":{"theme":"clean"}},"title":"Vecotr Search Engine","date":"Nov 5, 2023","categories":["R","Python","Embedding","BERT"],"description":"based on pretrained sentence embeddings","feed":true,"cap-location":"bottom","citation":{"author":"Huang Xinzhuo"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}